pub static BITS_BOARD: u64 = 24;
pub static BITS_STASH: u64 = 4;
pub static OFFSET_WHITE: u64 = BITS_BOARD;
pub static OFFSET_BLACK: u64 = 0;
pub static MASK_STASH_WHITE: u64 = ((1 << BITS_STASH) - 1) << (2*BITS_BOARD+BITS_STASH);
pub static MASK_STASH_BLACK: u64 = ((1 << BITS_STASH) - 1) << (2*BITS_BOARD);
pub static MASK_STASH: u64 = MASK_STASH_WHITE | MASK_STASH_BLACK;
pub static MASK_BOARD_BLACK: u64 = (1 << BITS_BOARD) - 1;
pub static MASK_BOARD_WHITE: u64 = MASK_BOARD_BLACK << BITS_BOARD;
pub static MASK_BOARD: u64 = MASK_BOARD_WHITE | MASK_BOARD_BLACK;

pub static MASK_MILLS: [u64;16] = [
    0b0000000000000000000000000000000000000000000000000000000000000111,
    0b0000000000000000000000000000000000000000000000000000000000011100,
    0b0000000000000000000000000000000000000000000000000000000001110000,
    0b0000000000000000000000000000000000000000000000000000000011000001,
    0b0000000000000000000000000000000000000000000000000000011100000000,
    0b0000000000000000000000000000000000000000000000000001110000000000,
    0b0000000000000000000000000000000000000000000000000111000000000000,
    0b0000000000000000000000000000000000000000000000001100000100000000,
    0b0000000000000000000000000000000000000000000001110000000000000000,
    0b0000000000000000000000000000000000000000000111000000000000000000,
    0b0000000000000000000000000000000000000000011100000000000000000000,
    0b0000000000000000000000000000000000000000110000010000000000000000,
    0b0000000000000000000000000000000000000000000000100000001000000010,
    0b0000000000000000000000000000000000000000000010000000100000001000,
    0b0000000000000000000000000000000000000000001000000010000000100000,
    0b0000000000000000000000000000000000000000100000001000000010000000
];